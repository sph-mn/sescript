#!/usr/bin/guile
!#

(import (sph common) (only (sph two) search-env-path-variable)
  (sph lang sescript) (sph stream) (ice-9 streams))

(define (process input-port output-port)
  (sescript->ecmascript (stream->list (port->stream input-port read)) output-port
    (pair
      (ensure-trailing-slash
        (pass-if (port-filename input-port) (l (a) (path->full-path (dirname a))) (getcwd)))
      ses-default-load-paths)))

(define (each-input-file proc paths) (each (l (path) (call-with-input-file path proc)) paths))

(define uglifyjs
  (let (uglifyjs-path (search-env-path-variable "uglifyjs"))
    (and uglifyjs-path
      (l (action) "symbol:compress/format -> list:process-chain-config"
        (list (q port) (q port)
          (case action
            ( (compress)
              (l (inp out) (process-replace uglifyjs-path "--compress" "--mangle" "--screw-ie8")))
            ((format) (l (inp out) (display "\n") (process-replace uglifyjs-path "--beautify")))))))))

(define* (ses #:optional post-process-action source-path . source+target-path)
  (let*
    ( (target-path (if (null? source+target-path) #f (last source+target-path)))
      (source-path
        (if source-path
          (pair source-path (if target-path (drop-right source+target-path 1) (list))) (list))))
    ;this code can probably be compressed a lot
    (if target-path
      (call-with-output-file target-path
        (l (target-file) (sescript-use-strict target-file)
          (if (and post-process-action uglifyjs)
            (if (null? source-path)
              (process-create-chain-with-paths/pipes (current-input-port) target-file
                (list (q port) (q port) process) (uglifyjs post-process-action))
              (process-create-chain-with-paths/pipes source-path target-file
                (list (q any) (q port)
                  (l (source-files out) (each-input-file (l (e) (process e out)) source-files)))
                (uglifyjs post-process-action)))
            (if (null? source-path) (process (current-input-port) target-file)
              (each-input-file (l (source-file) (process source-file target-file)) source-path)))))
      (let (port (current-output-port)) (sescript-use-strict port)
        (if (and post-process-action uglifyjs)
          (if (null? source-path)
            (process-create-chain-with-paths/pipes (current-input-port) port
              (list (q port) (q port) process) (uglifyjs post-process-action))
            (process-create-chain-with-paths/pipes source-path port
              (list (q any) (q port)
                (l (source-files out) (each-input-file (l (e) (process e out)) source-files)))
              (uglifyjs post-process-action)))
          (if (null? source-path) (process (current-input-port) port)
            (each-input-file (l (source-file) (process source-file port)) source-path)))))))

(let
  (options
    ( (cli-create #:description
        "compile sescript to ecmascript reading from files or standard input, and writing to a file or standard out depending on if paths are given as arguments."
        #:options
        (ql (format #\f #f #f #f #f "format output with uglifyjs")
          (compress #\c #f #f #f #f "compress output with uglifyjs") ((paths ...))))))
  (apply ses
    (or (and (symbol-alist-ref options format) (q format))
      (and (symbol-alist-ref options compress) (q compress)))
    (or (symbol-alist-ref options paths) (list))))